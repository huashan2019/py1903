<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\KEA128.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\KEA128.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed May 06 17:29:08 2020
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BT_DataRxPro &rArr; BtDataAnalyse &rArr; Dsp_Unite &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[60]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SVC_Handler</a><BR>
 <LI><a href="#[13]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PendSV_Handler</a><BR>
 <LI><a href="#[25]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ACMP0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2a]">ACMP1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[24]">ADC_IRQHandler</a> from interrupt.o(i.ADC_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[3a]">Amp8541_DLL_Loader</a> from app_tdf8541.o(i.Amp8541_DLL_Loader) referenced 4 times from app_amp.o(.constdata)
 <LI><a href="#[26]">FTM0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[27]">FTM1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[28]">FTM2_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1a]">FTMRE_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1d]">I2C0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[30]">ICS_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1c]">IRQ_IRQHandler</a> from interrupt.o(i.IRQ_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2d]">KBI0_IRQHandler</a> from interrupt.o(i.KBI0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2e]">KBI1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[33]">MSCAN_RX_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[34]">MSCAN_TX_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2b]">PIT_CH0_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2c]">PIT_CH1_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1b]">PMC_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[32]">PWT_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[29]">RTC_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[15]">Reserved16_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[16]">Reserved17_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[17]">Reserved18_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[18]">Reserved19_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[19]">Reserved20_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2f]">Reserved42_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1f]">SPI0_IRQHandler</a> from interrupt.o(i.SPI0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[20]">SPI1_IRQHandler</a> from interrupt.o(i.SPI1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_skeaz1284.o(i.SystemInit) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[38]">TDF8541Init</a> from app_tdf8541.o(i.TDF8541Init) referenced from app_tdf8541.o(i.Amp8541_DLL_Loader)
 <LI><a href="#[39]">TDF8541_AmpMute</a> from app_tdf8541.o(i.TDF8541_AmpMute) referenced from app_tdf8541.o(i.Amp8541_DLL_Loader)
 <LI><a href="#[21]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[23]">UART2_IRQHandler</a> from interrupt.o(i.UART2_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[31]">WDOG_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[3b]">__main</a> from __main.o(!!!main) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[36]">init_data_bss</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[197]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[198]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[199]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[19a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1b0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[43]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BT_DataRxPro &rArr; BtDataAnalyse &rArr; Dsp_Unite &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[62]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[36]"></a>init_data_bss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FTMRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>KBI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MSCAN_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>MSCAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PWT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>WDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_skeaz1284.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[4a]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpInit_FromKBI
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_VolUpdate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
</UL>

<P><STRONG><a name="[1c0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1c1]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[50]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1c2]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[53]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[56]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[57]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[59]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[58]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c4]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1c5]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1c6]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[186]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[191]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[5e]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[1c7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[52]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[1c9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1cc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>ACC_Detect</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, app_start.o(i.ACC_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ACC_Detect &rArr; GPIO_ReadInputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Detect
</UL>

<P><STRONG><a name="[65]"></a>ACC_EN_Ctl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mw_gpio.o(i.ACC_EN_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACC_EN_Ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerOff
</UL>

<P><STRONG><a name="[68]"></a>ACC_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_start.o(i.ACC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ACC_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpExit_FromACC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_IO_Init
</UL>

<P><STRONG><a name="[6b]"></a>AD1938_IO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ad1938.o(i.AD1938_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD1938_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[6c]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAdcExit
</UL>

<P><STRONG><a name="[6e]"></a>ADC_GetData</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mw_adc.o(i.ADC_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_GetData &rArr; ADC_PollRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollRead
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Voltage_Det
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
</UL>

<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ADC_Init</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Init &rArr; ADC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetFifoLevel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClockDivide
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAdcInit
</UL>

<P><STRONG><a name="[6f]"></a>ADC_PollRead</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, adc.o(i.ADC_PollRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_PollRead
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>

<P><STRONG><a name="[71]"></a>ADC_SelectClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SelectClock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[72]"></a>ADC_SelectClockDivide</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(i.ADC_SelectClockDivide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SelectClockDivide
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6d]"></a>ADC_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PollRead
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[74]"></a>ADC_SetFifoLevel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADC_SetFifoLevel))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[73]"></a>ADC_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(i.ADC_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[75]"></a>AMP_IO_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mw_gpio.o(i.AMP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AMP_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[76]"></a>AUDIO_Detect</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, app_start.o(i.AUDIO_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AUDIO_Detect &rArr; GPIO_ReadInputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Detect
</UL>

<P><STRONG><a name="[3a]"></a>Amp8541_DLL_Loader</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_tdf8541.o(i.Amp8541_DLL_Loader))
<BR>[Address Reference Count : 1]<UL><LI> app_amp.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>AmpMute</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_amp.o(i.AmpMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AmpMute
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUTE_Ctl
</UL>

<P><STRONG><a name="[77]"></a>AmpTypeCheck</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, app_amp.o(i.AmpTypeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AmpTypeCheck &rArr; I2C1_IsFindAddr &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IsFindAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Amp_Pro
</UL>

<P><STRONG><a name="[12d]"></a>AppJumpToBootloader</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_updata.o(i.AppJumpToBootloader))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Pro
</UL>

<P><STRONG><a name="[79]"></a>AtDataAnalyse</STRONG> (Thumb, 460 bytes, Stack size 16 bytes, app_at.o(i.AtDataAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AtDataAnalyse &rArr; UartTxData &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_compare
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
</UL>

<P><STRONG><a name="[7f]"></a>AudioMute</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_mute.o(i.AudioMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AudioMute &rArr; MUTE_Ctl &rArr; AmpMute
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUTE_Ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffSystemModule
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMessage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerOff
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>

<P><STRONG><a name="[81]"></a>Audio_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_start.o(i.Audio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Audio_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_IO_Init
</UL>

<P><STRONG><a name="[82]"></a>BT_DataRxPro</STRONG> (Thumb, 918 bytes, Stack size 24 bytes, app_connect.o(i.BT_DataRxPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = BT_DataRxPro &rArr; BtDataAnalyse &rArr; Dsp_Unite &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxCnt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_compare
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckData_Xor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Uart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtDataAnalyse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>BT_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mw_gpio.o(i.BT_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BT_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[8c]"></a>Bsp_ADC_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(i.Bsp_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_ADC_Init &rArr; SysAdcInit &rArr; ADC_Init &rArr; ADC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerExit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnSystemModule
</UL>

<P><STRONG><a name="[8e]"></a>Bsp_Clock_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(i.Bsp_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Clock_Init &rArr; sysinit &rArr; SIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
</UL>

<P><STRONG><a name="[90]"></a>Bsp_FLASH_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(i.Bsp_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_FLASH_Init &rArr; SysFlashInit &rArr; FLASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysFlashInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
</UL>

<P><STRONG><a name="[92]"></a>Bsp_GPIO_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.Bsp_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_GPIO_Init &rArr; GPIOInit &rArr; Start_IO_Init &rArr; ACC_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
</UL>

<P><STRONG><a name="[95]"></a>Bsp_Relocation_Int</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.Bsp_Relocation_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Relocation_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vtor
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>Bsp_SPI_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(i.Bsp_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bsp_SPI_Init &rArr; SysSpiInit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerExit
</UL>

<P><STRONG><a name="[99]"></a>Bsp_SysTick_Close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(i.Bsp_SysTick_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_SysTick_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
</UL>

<P><STRONG><a name="[9b]"></a>Bsp_SysTick_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.Bsp_SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_SysTick_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerExit
</UL>

<P><STRONG><a name="[9d]"></a>Bsp_UART_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(i.Bsp_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Bsp_UART_Init &rArr; SysUartInit &rArr; UartBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerExit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnSystemModule
</UL>

<P><STRONG><a name="[15a]"></a>Bsp_WDOG_Close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.Bsp_WDOG_Close))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
</UL>

<P><STRONG><a name="[9f]"></a>Bsp_WDOG_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp.o(i.Bsp_WDOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_WDOG_Init &rArr; WDOG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerExit
</UL>

<P><STRONG><a name="[88]"></a>BtDataAnalyse</STRONG> (Thumb, 3014 bytes, Stack size 32 bytes, app_bt.o(i.BtDataAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = BtDataAnalyse &rArr; Dsp_Unite &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Ctl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Unite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ReName
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OutPutChl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Filter_Reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Direct
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Data_Reset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVol
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PASSWORD
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PASSWORD
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ACK
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ON
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
</UL>

<P><STRONG><a name="[a2]"></a>Bt_ACK</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, app_bt.o(i.Bt_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Bt_ACK &rArr; UartTxData &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckData_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[87]"></a>Change_Uart</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, app_connect.o(i.Change_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Change_Uart &rArr; Set_Uart_Choose &rArr; Flash_Quick_WR &rArr; Flash_Write &rArr; FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExchangeTwoVariable_U8
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Choose
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
</UL>

<P><STRONG><a name="[ad]"></a>CheckVol</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_dsp_single_mute.o(i.CheckVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckVol &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[b9]"></a>Check_Uart</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_connect.o(i.Check_Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Check_Uart &rArr; Get_Uart_Choose &rArr; Flash_Quick_RD
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Uart_Choose
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSoftware_Init
</UL>

<P><STRONG><a name="[bb]"></a>ClearAllModeMessage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sch_message.o(i.ClearAllModeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ClearAllModeMessage &rArr; ClearMessage &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMessage
</UL>

<P><STRONG><a name="[bc]"></a>ClearMessage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sch_message.o(i.ClearMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ClearMessage &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyPowerDown
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllModeMessage
</UL>

<P><STRONG><a name="[be]"></a>DSP_IO_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_dsp_driver.o(i.DSP_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[bf]"></a>DSP_TEST_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mw_gpio.o(i.DSP_TEST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DSP_TEST_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[c0]"></a>DSP_Test_Detect</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, mw_gpio.o(i.DSP_Test_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = DSP_Test_Detect &rArr; Dsp_OFF &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ON
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPin
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
</UL>

<P><STRONG><a name="[89]"></a>Debug_CMD</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_debug.o(i.Debug_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Debug_CMD &rArr; Flash_Dsp_SE &rArr; Eprom_SE_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_SE
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_download_IC_1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
</UL>

<P><STRONG><a name="[c3]"></a>DspDataInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_dsp_adau1452.o(i.DspDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DspDataInit &rArr; Dsp_ReName_Init &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Filter_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ReName_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OutPutChl_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Data_Reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
</UL>

<P><STRONG><a name="[cc]"></a>DspInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.DspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DspInit &rArr; DspDataInit &rArr; Dsp_ReName_Init &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspModeNameInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSoftware_Init
</UL>

<P><STRONG><a name="[cd]"></a>DspModeNameInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.DspModeNameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DspModeNameInit &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[a3]"></a>Dsp_Data_Reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_Data_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Dsp_Data_Reset &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_DspNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[ab]"></a>Dsp_Delay</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_dsp_adau1452.o(i.Dsp_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dsp_Delay &rArr; SIGMA_WRITE_REGISTER_BLOCK &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[c8]"></a>Dsp_Delay_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dsp_Delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[a5]"></a>Dsp_EQ_Direct</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, app_dsp_eq.o(i.Dsp_EQ_Direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Dsp_EQ_Direct &rArr; Dsp_EQ_Set &rArr; EQ_Algorithm &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
</UL>

<P><STRONG><a name="[c7]"></a>Dsp_EQ_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, app_dsp_eq.o(i.Dsp_EQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dsp_EQ_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[d2]"></a>Dsp_EQ_Left_Req</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, app_dsp_eq.o(i.Dsp_EQ_Left_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dsp_EQ_Left_Req &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Dsp_Pro
</UL>

<P><STRONG><a name="[a4]"></a>Dsp_EQ_Reset</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_dsp_eq.o(i.Dsp_EQ_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Dsp_EQ_Reset &rArr; Dsp_EQ_Set &rArr; EQ_Algorithm &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[d3]"></a>Dsp_EQ_Right_Req</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, app_dsp_eq.o(i.Dsp_EQ_Right_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Dsp_EQ_Right_Req &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Dsp_Pro
</UL>

<P><STRONG><a name="[aa]"></a>Dsp_EQ_Set</STRONG> (Thumb, 348 bytes, Stack size 96 bytes, app_dsp_eq.o(i.Dsp_EQ_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Dsp_EQ_Set &rArr; EQ_Algorithm &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Unite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Direct
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[d8]"></a>Dsp_File_TO_Flash</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, app_dspdata_access.o(i.Dsp_File_TO_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Dsp_File_TO_Flash &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Store
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_DspNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[c6]"></a>Dsp_Filter_Init</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, app_dsp_filter.o(i.Dsp_Filter_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[a6]"></a>Dsp_Filter_Reset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_dsp_filter.o(i.Dsp_Filter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Dsp_Filter_Reset &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[da]"></a>Dsp_Flash_TO_File</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, app_dspdata_access.o(i.Dsp_Flash_TO_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Dsp_Flash_TO_File &rArr; Dsp_Load &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_DspNum
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[a9]"></a>Dsp_GEN_Filter</STRONG> (Thumb, 986 bytes, Stack size 216 bytes, app_dsp_filter.o(i.Dsp_GEN_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Bypassed
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Unite
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Filter_Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[e3]"></a>Dsp_Info_Data</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, app_dsp_readback.o(i.Dsp_Info_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Dsp_Info_Data &rArr; Dsp_Mute_A &rArr; Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_READ
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Det
</UL>

<P><STRONG><a name="[e9]"></a>Dsp_Info_Det</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, app_dsp_readback.o(i.Dsp_Info_Det))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Dsp_Info_Det &rArr; Dsp_Info_Data &rArr; Dsp_Mute_A &rArr; Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Dsp_Pro
</UL>

<P><STRONG><a name="[db]"></a>Dsp_Load</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_dspdata_access.o(i.Dsp_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Dsp_Load &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_RD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Flash_TO_File
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[eb]"></a>Dsp_Load_Mode_Name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_dspdata_access.o(i.Dsp_Load_Mode_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dsp_Load_Mode_Name &rArr; Flash_Dsp_RD &rArr; Eprom_RD_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[c5]"></a>Dsp_Mix_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_dsp_mix.o(i.Dsp_Mix_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dsp_Mix_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[ec]"></a>Dsp_Mix_Input</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, app_dsp_mix.o(i.Dsp_Mix_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Dsp_Mix_Input &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[a8]"></a>Dsp_Mix_Mixer</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, app_dsp_mix.o(i.Dsp_Mix_Mixer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Dsp_Mix_Mixer &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[af]"></a>Dsp_Mute</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_dsp_single_mute.o(i.Dsp_Mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Dsp_Mute &rArr; Dsp_Mute_A &rArr; Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ON
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
</UL>

<P><STRONG><a name="[e2]"></a>Dsp_Mute_A</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_dsp_single_mute.o(i.Dsp_Mute_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Dsp_Mute_A &rArr; Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_VolUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_Direct
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>

<P><STRONG><a name="[f0]"></a>Dsp_Mute_Direct</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_dsp_single_mute.o(i.Dsp_Mute_Direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Dsp_Mute_Direct &rArr; Dsp_Mute_A &rArr; Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[ca]"></a>Dsp_Mute_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_dsp_single_mute.o(i.Dsp_Mute_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[b5]"></a>Dsp_OFF</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Dsp_OFF &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Direct
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Test_Detect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[b6]"></a>Dsp_ON</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Dsp_ON &rArr; Dsp_Mute &rArr; Dsp_Mute_A &rArr; Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Test_Detect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[ae]"></a>Dsp_OutPutChl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_dsp_adau1452.o(i.Dsp_OutPutChl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dsp_OutPutChl &rArr; SIGMA_WRITE_REGISTER_BLOCK &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[cb]"></a>Dsp_OutPutChl_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_dsp_adau1452.o(i.Dsp_OutPutChl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[f1]"></a>Dsp_PowerOnInit</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_PowerOnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Dsp_PowerOnInit &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_download_IC_1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_DspNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Dsp_Pro
</UL>

<P><STRONG><a name="[b0]"></a>Dsp_ReName</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_dsp_adau1452.o(i.Dsp_ReName))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dsp_ReName &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[c4]"></a>Dsp_ReName_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_ReName_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dsp_ReName_Init &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[ac]"></a>Dsp_Single</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_dsp_single_mute.o(i.Dsp_Single))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Dsp_Single &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Ctl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Unite
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[f4]"></a>Dsp_Single_A</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, app_dsp_single_mute.o(i.Dsp_Single_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMASTUDIOTYPE
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_VolUpdate
</UL>

<P><STRONG><a name="[c9]"></a>Dsp_Single_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_dsp_single_mute.o(i.Dsp_Single_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dsp_Single_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>

<P><STRONG><a name="[d9]"></a>Dsp_Store</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_dspdata_access.o(i.Dsp_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dsp_Store &rArr; Flash_Dsp_WR &rArr; Eprom_WR_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_File_TO_Flash
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[f6]"></a>Dsp_StoreLoadPro</STRONG> (Thumb, 468 bytes, Stack size 8 bytes, app_dspdata_access.o(i.Dsp_StoreLoadPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Dsp_StoreLoadPro &rArr; Dsp_Flash_TO_File &rArr; Dsp_Load &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Data_Reset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVol
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Store_Mode_Name
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Store
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load_Mode_Name
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Flash_TO_File
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_File_TO_Flash
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WR_State_Clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_RD_State_Clear
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_DspNum
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspModeNameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Dsp_Pro
</UL>

<P><STRONG><a name="[f9]"></a>Dsp_Store_Mode_Name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_dspdata_access.o(i.Dsp_Store_Mode_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Dsp_Store_Mode_Name &rArr; Flash_Dsp_WR &rArr; Eprom_WR_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[a7]"></a>Dsp_TestMode</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Dsp_TestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Dsp_TestMode &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Direct
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_DspNum
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[b1]"></a>Dsp_Unite</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, app_dsp_adau1452.o(i.Dsp_Unite))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Dsp_Unite &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[cf]"></a>Dsp_Updata</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, app_dsp_adau1452.o(i.Dsp_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OutPutChl
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Delay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVol
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_Direct
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Data_Reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_File_TO_Flash
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_PowerOnInit
</UL>

<P><STRONG><a name="[ef]"></a>Dsp_VolUpdate</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_dsp_single_mute.o(i.Dsp_VolUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Dsp_VolUpdate &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
</UL>

<P><STRONG><a name="[d5]"></a>EQ_Algorithm</STRONG> (Thumb, 536 bytes, Stack size 128 bytes, app_dsp_eq.o(i.EQ_Algorithm))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = EQ_Algorithm &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
</UL>

<P><STRONG><a name="[ff]"></a>EmergencyPowerDown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_voltage.o(i.EmergencyPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EmergencyPowerDown &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMessage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Voltage_Det
</UL>

<P><STRONG><a name="[100]"></a>EnterPowerOff</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_power.o(i.EnterPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterPowerOff &rArr; AudioMute &rArr; MUTE_Ctl &rArr; AmpMute
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Power_Ctl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_EN_Ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
</UL>

<P><STRONG><a name="[102]"></a>Eprom_IO_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_eprom.o(i.Eprom_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Eprom_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[103]"></a>Eprom_RD_Data</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, app_eprom.o(i.Eprom_RD_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Eprom_RD_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_RD
</UL>

<P><STRONG><a name="[105]"></a>Eprom_SE_Data</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_eprom.o(i.Eprom_SE_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Eprom_SE_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_SE
</UL>

<P><STRONG><a name="[106]"></a>Eprom_WR_Command</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_eprom.o(i.Eprom_WR_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Eprom_WR_Command &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_WR
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_SE
</UL>

<P><STRONG><a name="[107]"></a>Eprom_WR_Data</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_eprom.o(i.Eprom_WR_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Eprom_WR_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_WR
</UL>

<P><STRONG><a name="[108]"></a>Eprom_WR_Order</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_eprom.o(i.Eprom_WR_Order))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Eprom_WR_Order &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_WR
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_SE
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_RD
</UL>

<P><STRONG><a name="[b7]"></a>ExchangeTwoVariable_U8</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sch_common.o(i.ExchangeTwoVariable_U8))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Uart
</UL>

<P><STRONG><a name="[109]"></a>FEI_to_FBE_OSC</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, ics.o(i.FEI_to_FBE_OSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FBE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[10c]"></a>FEI_to_FEE</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ics.o(i.FEI_to_FEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[10d]"></a>FEI_to_FEE_OSC</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, ics.o(i.FEI_to_FEE_OSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_SetClkDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
</UL>

<P><STRONG><a name="[10e]"></a>FLASH_EraseSector</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[110]"></a>FLASH_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysFlashInit
</UL>

<P><STRONG><a name="[10f]"></a>FLASH_LaunchCMD</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, flash.o(i.FLASH_LaunchCMD))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program2LongWords
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[112]"></a>FLASH_Program1LongWord</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, flash.o(i.FLASH_Program1LongWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Program_U8
</UL>

<P><STRONG><a name="[113]"></a>FLASH_Program2LongWords</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, flash.o(i.FLASH_Program2LongWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program2LongWords
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LaunchCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Program_U8
</UL>

<P><STRONG><a name="[83]"></a>FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(i.FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Unite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OFF
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[dd]"></a>Filter_1st_Order_Butterworth</STRONG> (Thumb, 442 bytes, Stack size 96 bytes, app_dsp_filter.o(i.Filter_1st_Order_Butterworth))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Filter_1st_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
</UL>

<P><STRONG><a name="[e1]"></a>Filter_2st_Order_Bessel</STRONG> (Thumb, 654 bytes, Stack size 104 bytes, app_dsp_filter.o(i.Filter_2st_Order_Bessel))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Filter_2st_Order_Bessel &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
</UL>

<P><STRONG><a name="[df]"></a>Filter_2st_Order_Butterworth</STRONG> (Thumb, 656 bytes, Stack size 112 bytes, app_dsp_filter.o(i.Filter_2st_Order_Butterworth))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Filter_2st_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
</UL>

<P><STRONG><a name="[de]"></a>Filter_Bypassed</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_dsp_filter.o(i.Filter_Bypassed))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
</UL>

<P><STRONG><a name="[e0]"></a>Filter_Higher_Order_Butterworth</STRONG> (Thumb, 728 bytes, Stack size 120 bytes, app_dsp_filter.o(i.Filter_Higher_Order_Butterworth))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
</UL>

<P><STRONG><a name="[ea]"></a>Flash_Dsp_RD</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, app_eprom.o(i.Flash_Dsp_RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flash_Dsp_RD &rArr; Eprom_RD_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Order
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_RD_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load_Mode_Name
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load
</UL>

<P><STRONG><a name="[c2]"></a>Flash_Dsp_SE</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_eprom.o(i.Flash_Dsp_SE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Dsp_SE &rArr; Eprom_SE_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Order
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_SE_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
</UL>

<P><STRONG><a name="[f5]"></a>Flash_Dsp_WR</STRONG> (Thumb, 486 bytes, Stack size 48 bytes, app_eprom.o(i.Flash_Dsp_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flash_Dsp_WR &rArr; Eprom_WR_Data &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Order
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Store_Mode_Name
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Store
</UL>

<P><STRONG><a name="[116]"></a>Flash_Erase</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mw_flash.o(i.Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Erase &rArr; FLASH_EraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR_U8
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR
</UL>

<P><STRONG><a name="[f2]"></a>Flash_Get_DspNum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Flash_Get_DspNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Flash_Get_DspNum &rArr; Flash_Quick_RD
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_PowerOnInit
</UL>

<P><STRONG><a name="[118]"></a>Flash_Program_U8</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, mw_flash.o(i.Flash_Program_U8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Program_U8 &rArr; FLASH_Program2LongWords
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program2LongWords
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8_TO_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR_U8
</UL>

<P><STRONG><a name="[117]"></a>Flash_Quick_RD</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mw_flash.o(i.Flash_Quick_RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_Quick_RD
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Uart_Choose
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Get_DspNum
</UL>

<P><STRONG><a name="[12f]"></a>Flash_Quick_RD_U8</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, mw_flash.o(i.Flash_Quick_RD_U8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_Quick_RD_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PASSWORD
</UL>

<P><STRONG><a name="[11b]"></a>Flash_Quick_WR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mw_flash.o(i.Flash_Quick_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Flash_Quick_WR &rArr; Flash_Write &rArr; FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In_IapMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Uart_Choose
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_DspNum
</UL>

<P><STRONG><a name="[11d]"></a>Flash_Quick_WR_U8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mw_flash.o(i.Flash_Quick_WR_U8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Flash_Quick_WR_U8 &rArr; Flash_Program_U8 &rArr; FLASH_Program2LongWords
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Program_U8
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PASSWORD
</UL>

<P><STRONG><a name="[f8]"></a>Flash_RD_State_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_eprom.o(i.Flash_RD_State_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[11a]"></a>Flash_Read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mw_flash.o(i.Flash_Read))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_RD
</UL>

<P><STRONG><a name="[ce]"></a>Flash_Set_DspNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.Flash_Set_DspNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Flash_Set_DspNum &rArr; Flash_Quick_WR &rArr; Flash_Write &rArr; FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Data_Reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Flash_TO_File
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_File_TO_Flash
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[f7]"></a>Flash_WR_State_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_eprom.o(i.Flash_WR_State_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
</UL>

<P><STRONG><a name="[11c]"></a>Flash_Write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mw_flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash_Write &rArr; FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program1LongWord
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR
</UL>

<P><STRONG><a name="[94]"></a>GPIOInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mw_gpio.o(i.GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOInit &rArr; Start_IO_Init &rArr; ACC_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUTE_IO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_IO_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IO_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_IO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IO_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1938_IO_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_IO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TEST_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_IO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMP_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GPIO_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
</UL>

<P><STRONG><a name="[93]"></a>GPIO_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.GPIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GPIO_Init
</UL>

<P><STRONG><a name="[142]"></a>GPIO_Init</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIO
</UL>

<P><STRONG><a name="[67]"></a>GPIO_PinClear</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinClear))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUTE_Ctl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Amp_Pro
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Power_Ctl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_EN_Ctl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerOff
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_READ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Ctl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Order
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_SE_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_RD_Data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_DELAY
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Det
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Updata
</UL>

<P><STRONG><a name="[69]"></a>GPIO_PinInit</STRONG> (Thumb, 816 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinInit))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUTE_IO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpInit_FromKBI
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IO_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_IO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IO_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1938_IO_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_IO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TEST_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_IO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMP_IO_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Out8Bit
</UL>

<P><STRONG><a name="[66]"></a>GPIO_PinSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinSet))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MUTE_Ctl
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Amp_Pro
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_IO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_IO_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Power_Ctl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_EN_Ctl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnSystemModule
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_READ
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Ctl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Order
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_SE_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_RD_Data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_DELAY
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ReadInputPin</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mw_gpio.o(i.GPIO_ReadInputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_ReadInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Test_Detect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Detect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Detect
</UL>

<P><STRONG><a name="[86]"></a>GetCheckData_Xor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sch_common.o(i.GetCheckData_Xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCheckData_Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2B_TxService
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ACK
</UL>

<P><STRONG><a name="[136]"></a>GetMax</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sch_common.o(i.GetMax))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
</UL>

<P><STRONG><a name="[122]"></a>GetMessage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sch_message.o(i.GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetMessage &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2B_TxService
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMessage
</UL>

<P><STRONG><a name="[137]"></a>GetMin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sch_common.o(i.GetMin))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vol_Ctl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitMaxMin
</UL>

<P><STRONG><a name="[ba]"></a>Get_Uart_Choose</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_connect.o(i.Get_Uart_Choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Uart_Choose &rArr; Flash_Quick_RD
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Uart
</UL>

<P><STRONG><a name="[172]"></a>Hardware_Ver_Pro</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_power.o(i.Hardware_Ver_Pro))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
</UL>

<P><STRONG><a name="[124]"></a>I2C1Out8Bit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, mw_i2c.o(i.I2C1Out8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWait
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IsFindAddr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Tx
</UL>

<P><STRONG><a name="[126]"></a>I2C1Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mw_i2c.o(i.I2C1Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C1Start &rArr; SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IsFindAddr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Tx
</UL>

<P><STRONG><a name="[127]"></a>I2C1Stop</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mw_i2c.o(i.I2C1Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C1Stop &rArr; SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWait
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IsFindAddr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Tx
</UL>

<P><STRONG><a name="[78]"></a>I2C1_IsFindAddr</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mw_i2c.o(i.I2C1_IsFindAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_IsFindAddr &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Out8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpTypeCheck
</UL>

<P><STRONG><a name="[128]"></a>I2C1_Tx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mw_i2c.o(i.I2C1_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_Tx &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Out8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDF8541_AmpMute
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDF8541Init
</UL>

<P><STRONG><a name="[125]"></a>I2CWait</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, mw_i2c.o(i.I2CWait))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Out8Bit
</UL>

<P><STRONG><a name="[129]"></a>IAP_Pro</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_updata.o(i.IAP_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IAP_Pro &rArr; SysSpiExit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartExit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysFlashInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiExit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In_IapMode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppJumpToBootloader
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100ms_Pro
</UL>

<P><STRONG><a name="[12e]"></a>ICS_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ics.o(i.ICS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICS_Init &rArr; FEI_to_FEE_OSC
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[10b]"></a>ICS_SetClkDivider</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ics.o(i.ICS_SetClkDivider))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>

<P><STRONG><a name="[192]"></a>ICS_Trim</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ics.o(i.ICS_Trim))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[1c]"></a>IRQ_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interrupt.o(i.IRQ_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>In_IapMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_updata.o(i.In_IapMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = In_IapMode &rArr; Flash_Quick_WR &rArr; Flash_Write &rArr; FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Pro
</UL>

<P><STRONG><a name="[b2]"></a>Is_PASSWORD</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_bt.o(i.Is_PASSWORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Is_PASSWORD &rArr; sch_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_compare
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_RD_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[2d]"></a>KBI0_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, interrupt.o(i.KBI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KBI0_IRQHandler &rArr; SysWaitMs &rArr; SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>KBI_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kbi.o(i.KBI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KBI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpExit_FromKBI
</UL>

<P><STRONG><a name="[132]"></a>KBI_Init</STRONG> (Thumb, 402 bytes, Stack size 288 bytes, kbi.o(i.KBI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = KBI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpInit_FromKBI
</UL>

<P><STRONG><a name="[135]"></a>LED_Ctl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_led.o(i.LED_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_LED_pro
</UL>

<P><STRONG><a name="[121]"></a>LED_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_led.o(i.LED_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[d4]"></a>LimitMaxMin</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, sch_common.o(i.LimitMaxMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitMaxMin
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMax
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OutPutChl
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
</UL>

<P><STRONG><a name="[138]"></a>M2B_TxService</STRONG> (Thumb, 2388 bytes, Stack size 32 bytes, app_bt.o(i.M2B_TxService))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = M2B_TxService &rArr; UartTxData &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckData_Xor
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Bt_Pro
</UL>

<P><STRONG><a name="[80]"></a>MUTE_Ctl</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_mute.o(i.MUTE_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MUTE_Ctl &rArr; AmpMute
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMute
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
</UL>

<P><STRONG><a name="[120]"></a>MUTE_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_mute.o(i.MUTE_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MUTE_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[10a]"></a>OSC_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ics.o(i.OSC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE_OSC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FEE
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEI_to_FBE_OSC
</UL>

<P><STRONG><a name="[13a]"></a>PMC_SetMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pmc.o(i.PMC_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PMC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[11f]"></a>PWR_IO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mw_gpio.o(i.PWR_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[7d]"></a>PostMessage</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sch_message.o(i.PostMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Detect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Test_Detect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_TestMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Data_Reset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVol
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyPowerDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ON
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Flash_TO_File
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_File_TO_Flash
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtDataAnalyse
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Right_Req
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Left_Req
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_PowerOnInit
</UL>

<P><STRONG><a name="[13e]"></a>PowerMessage</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, app_power.o(i.PowerMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PowerMessage &rArr; GetMessage &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllModeMessage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffSystemModule
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
</UL>

<P><STRONG><a name="[13f]"></a>PowerOffSystemModule</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_power.o(i.PowerOffSystemModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PowerOffSystemModule &rArr; AudioMute &rArr; MUTE_Ctl &rArr; AmpMute
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMessage
</UL>

<P><STRONG><a name="[140]"></a>PowerOnSystemModule</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_power.o(i.PowerOnSystemModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PowerOnSystemModule &rArr; Bsp_UART_Init &rArr; SysUartInit &rArr; UartBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
</UL>

<P><STRONG><a name="[17c]"></a>Queue_Cnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sch_queue.o(i.Queue_Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufCnt
</UL>

<P><STRONG><a name="[13d]"></a>Queue_In</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sch_queue.o(i.Queue_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutToBuf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
</UL>

<P><STRONG><a name="[bd]"></a>Queue_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sch_queue.o(i.Queue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearMessage
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiBufInit
</UL>

<P><STRONG><a name="[123]"></a>Queue_Out</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sch_queue.o(i.Queue_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetFromBuf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[141]"></a>ResetIO</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_lowpower.o(i.ResetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ResetIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
</UL>

<P><STRONG><a name="[143]"></a>SCH_Task_Execute</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, task.o(i.SCH_Task_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SCH_Task_Execute &rArr; Task_8ms_Pro &rArr; TASK_Dsp_Pro &rArr; Dsp_StoreLoadPro &rArr; Dsp_Flash_TO_File &rArr; Dsp_Load &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_4ms_Pro
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_16ms_Pro
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100ms_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>SIGMASTUDIOTYPE</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, app_dsp_adau1452.o(i.SIGMASTUDIOTYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SIGMASTUDIOTYPE &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
</UL>

<P><STRONG><a name="[e4]"></a>SIGMA_READ</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_dsp_driver.o(i.SIGMA_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIGMA_READ &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>

<P><STRONG><a name="[d7]"></a>SIGMA_SAFELOAD_WRITE_REGISTER</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, app_dsp_driver.o(i.SIGMA_SAFELOAD_WRITE_REGISTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SIGMA_SAFELOAD_WRITE_REGISTER &rArr; SIGMA_WRITE &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
</UL>

<P><STRONG><a name="[149]"></a>SIGMA_WRITE</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_dsp_driver.o(i.SIGMA_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIGMA_WRITE &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
</UL>

<P><STRONG><a name="[14a]"></a>SIGMA_WRITE_DELAY</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_dsp_driver.o(i.SIGMA_WRITE_DELAY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIGMA_WRITE_DELAY &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_download_IC_1
</UL>

<P><STRONG><a name="[d0]"></a>SIGMA_WRITE_REGISTER_BLOCK</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_dsp_driver.o(i.SIGMA_WRITE_REGISTER_BLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIGMA_WRITE_REGISTER_BLOCK &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_OutPutChl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Delay
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_download_IC_1
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
</UL>

<P><STRONG><a name="[193]"></a>SIM_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sim.o(i.SIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[1f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>SPI_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi.o(i.SPI_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiExit
</UL>

<P><STRONG><a name="[14b]"></a>SPI_Init</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockPhase
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ModfEnable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiExit
</UL>

<P><STRONG><a name="[104]"></a>SPI_RW</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mw_spi.o(i.SPI_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteDataReg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IsSPTEF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IsSPRF
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_READ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Order
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_WR_Command
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_SE_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eprom_RD_Data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_DELAY
</UL>

<P><STRONG><a name="[14f]"></a>SPI_SetBaudRate</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, spi.o(i.SPI_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[101]"></a>SYS_Power_Ctl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mw_gpio.o(i.SYS_Power_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_Power_Ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerOff
</UL>

<P><STRONG><a name="[b3]"></a>Set_PASSWORD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_bt.o(i.Set_PASSWORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_PASSWORD &rArr; Flash_Quick_WR_U8 &rArr; Flash_Program_U8 &rArr; FLASH_Program2LongWords
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[b8]"></a>Set_Uart_Choose</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_connect.o(i.Set_Uart_Choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Set_Uart_Choose &rArr; Flash_Quick_WR &rArr; Flash_Write &rArr; FLASH_Program1LongWord
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Quick_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Uart
</UL>

<P><STRONG><a name="[153]"></a>SpiBufInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mw_spi.o(i.SpiBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SpiBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiInit
</UL>

<P><STRONG><a name="[154]"></a>Start_Detect</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, app_start.o(i.Start_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Start_Detect &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Detect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
</UL>

<P><STRONG><a name="[11e]"></a>Start_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_start.o(i.Start_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_IO_Init &rArr; ACC_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[155]"></a>SysAdcExit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mw_adc.o(i.SysAdcExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysAdcExit &rArr; ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
</UL>

<P><STRONG><a name="[8d]"></a>SysAdcInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mw_adc.o(i.SysAdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysAdcInit &rArr; ADC_Init &rArr; ADC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_ADC_Init
</UL>

<P><STRONG><a name="[156]"></a>SysDataInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, system.o(i.SysDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysDataInit &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSoftware_Init
</UL>

<P><STRONG><a name="[91]"></a>SysFlashInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mw_flash.o(i.SysFlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysFlashInit &rArr; FLASH_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Pro
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FLASH_Init
</UL>

<P><STRONG><a name="[157]"></a>SysHardware_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.SysHardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysHardware_Init &rArr; Bsp_SPI_Init &rArr; SysSpiInit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WDOG_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTick_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SPI_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FLASH_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Clock_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>SysLowPowerExit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_lowpower.o(i.SysLowPowerExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysLowPowerExit &rArr; Bsp_SPI_Init &rArr; SysSpiInit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WDOG_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTick_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SPI_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[159]"></a>SysLowPowerInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_lowpower.o(i.SysLowPowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysLowPowerInit &rArr; SysSpiExit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartExit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WDOG_Close
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTick_Close
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetIO
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSpiExit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAdcExit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[15b]"></a>SysSoftware_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.SysSoftware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysSoftware_Init &rArr; DspInit &rArr; DspDataInit &rArr; Dsp_ReName_Init &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDataInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Uart
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>SysSpiExit</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mw_spi.o(i.SysSpiExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysSpiExit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Pro
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
</UL>

<P><STRONG><a name="[98]"></a>SysSpiInit</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, mw_spi.o(i.SysSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysSpiInit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SPI_Init
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>SysUartExit</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, mw_uart.o(i.SysUartExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysUartExit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Pro
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
</UL>

<P><STRONG><a name="[9e]"></a>SysUartInit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, mw_uart.o(i.SysUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysUartInit &rArr; UartBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
</UL>

<P><STRONG><a name="[164]"></a>SysWait1Us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sch_common.o(i.SysWait1Us))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>

<P><STRONG><a name="[7e]"></a>SysWaitMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sch_common.o(i.SysWaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysWaitMs &rArr; SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI0_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtDataAnalyse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_SE
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mute_A
</UL>

<P><STRONG><a name="[d1]"></a>SysWaitUs</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sch_common.o(i.SysWaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWait1Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitMs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_GEN_Filter
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Direct
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_SAFELOAD_WRITE_REGISTER
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_DELAY
</UL>

<P><STRONG><a name="[165]"></a>SysWakeUpExit_FromACC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_lowpower.o(i.SysWakeUpExit_FromACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysWakeUpExit_FromACC &rArr; ACC_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[166]"></a>SysWakeUpExit_FromKBI</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_lowpower.o(i.SysWakeUpExit_FromKBI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysWakeUpExit_FromKBI &rArr; KBI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[16c]"></a>SysWakeUpExit_FromRTC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_lowpower.o(i.SysWakeUpExit_FromRTC))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[16a]"></a>SysWakeUpInit_FromACC</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_lowpower.o(i.SysWakeUpInit_FromACC))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[167]"></a>SysWakeUpInit_FromKBI</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, app_lowpower.o(i.SysWakeUpInit_FromKBI))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SysWakeUpInit_FromKBI &rArr; KBI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[16b]"></a>SysWakeUpInit_FromRTC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_lowpower.o(i.SysWakeUpInit_FromRTC))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_skeaz1284.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>SystemPowerUp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_power.o(i.SystemPowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemPowerUp &rArr; GPIOInit &rArr; Start_IO_Init &rArr; ACC_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Power_Ctl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllModeMessage
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_EN_Ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
</UL>

<P><STRONG><a name="[169]"></a>TASK_AccOff_Pro</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, app_lowpower.o(i.TASK_AccOff_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TASK_AccOff_Pro &rArr; SysWakeUpInit_FromKBI &rArr; KBI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_SetMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpInit_FromRTC
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpInit_FromKBI
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpInit_FromACC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpExit_FromRTC
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpExit_FromKBI
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWakeUpExit_FromACC
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLowPowerExit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>TASK_Amp_Pro</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_amp.o(i.TASK_Amp_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TASK_Amp_Pro &rArr; AmpTypeCheck &rArr; I2C1_IsFindAddr &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpTypeCheck
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_16ms_Pro
</UL>

<P><STRONG><a name="[16e]"></a>TASK_Bt_Pro</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, app_bt.o(i.TASK_Bt_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TASK_Bt_Pro &rArr; M2B_TxService &rArr; UartTxData &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2B_TxService
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
</UL>

<P><STRONG><a name="[16f]"></a>TASK_Dsp_Pro</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.TASK_Dsp_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = TASK_Dsp_Pro &rArr; Dsp_StoreLoadPro &rArr; Dsp_Flash_TO_File &rArr; Dsp_Load &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Det
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Right_Req
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_EQ_Left_Req
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_PowerOnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
</UL>

<P><STRONG><a name="[174]"></a>TASK_Eeprom_Pro</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_eprom.o(i.TASK_Eeprom_Pro))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
</UL>

<P><STRONG><a name="[170]"></a>TASK_LED_pro</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_led.o(i.TASK_LED_pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TASK_LED_pro &rArr; LED_Ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100ms_Pro
</UL>

<P><STRONG><a name="[171]"></a>TASK_Power_Pro</STRONG> (Thumb, 620 bytes, Stack size 8 bytes, app_power.o(i.TASK_Power_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TASK_Power_Pro &rArr; PowerOnSystemModule &rArr; Bsp_UART_Init &rArr; SysUartInit &rArr; UartBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinClear
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioMute
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerUp
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnSystemModule
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMessage
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_Ver_Pro
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterPowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_8ms_Pro
</UL>

<P><STRONG><a name="[173]"></a>TASK_Voltage_Det</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, app_voltage.o(i.TASK_Voltage_Det))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TASK_Voltage_Det &rArr; EmergencyPowerDown &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyPowerDown
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_4ms_Pro
</UL>

<P><STRONG><a name="[38]"></a>TDF8541Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_tdf8541.o(i.TDF8541Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TDF8541Init &rArr; I2C1_Tx &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tdf8541.o(i.Amp8541_DLL_Loader)
</UL>
<P><STRONG><a name="[39]"></a>TDF8541_AmpMute</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_tdf8541.o(i.TDF8541_AmpMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TDF8541_AmpMute &rArr; I2C1_Tx &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_tdf8541.o(i.Amp8541_DLL_Loader)
</UL>
<P><STRONG><a name="[147]"></a>Task_100ms_Pro</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task.o(i.Task_100ms_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Task_100ms_Pro &rArr; IAP_Pro &rArr; SysSpiExit &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_LED_pro
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Task_Execute
</UL>

<P><STRONG><a name="[146]"></a>Task_16ms_Pro</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task.o(i.Task_16ms_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task_16ms_Pro &rArr; TASK_Amp_Pro &rArr; AmpTypeCheck &rArr; I2C1_IsFindAddr &rArr; I2C1Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Amp_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Task_Execute
</UL>

<P><STRONG><a name="[144]"></a>Task_4ms_Pro</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task.o(i.Task_4ms_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Task_4ms_Pro &rArr; TASK_Voltage_Det &rArr; EmergencyPowerDown &rArr; PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Voltage_Det
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Task_Execute
</UL>

<P><STRONG><a name="[145]"></a>Task_8ms_Pro</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task.o(i.Task_8ms_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Task_8ms_Pro &rArr; TASK_Dsp_Pro &rArr; Dsp_StoreLoadPro &rArr; Dsp_Flash_TO_File &rArr; Dsp_Load &rArr; Dsp_Updata &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Eeprom_Pro
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Dsp_Pro
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Bt_Pro
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Detect
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Test_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Task_Execute
</UL>

<P><STRONG><a name="[21]"></a>UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART0_IRQHandler &rArr; UART_IntSerive &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART1_IRQHandler &rArr; UART_IntSerive &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART2_IRQHandler &rArr; UART_IntSerive &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>UART_CheckFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart.o(i.UART_CheckFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_CheckFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
</UL>

<P><STRONG><a name="[15d]"></a>UART_DisableInterrupt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, uart.o(i.UART_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntDis
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartExit
</UL>

<P><STRONG><a name="[160]"></a>UART_EnableInterrupt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, uart.o(i.UART_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntEn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[178]"></a>UART_GetChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.UART_GetChar))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
</UL>

<P><STRONG><a name="[177]"></a>UART_GetFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UART_GetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
</UL>

<P><STRONG><a name="[15f]"></a>UART_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[175]"></a>UART_IntSerive</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mw_uart.o(i.UART_IntSerive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_IntSerive &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckFlag
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_DataPro
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>UART_PutChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData8
</UL>

<P><STRONG><a name="[17b]"></a>UartBufCnt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mw_uart.o(i.UartBufCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartBufCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxCnt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxCnt
</UL>

<P><STRONG><a name="[163]"></a>UartBufInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mw_uart.o(i.UartBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UartBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[17d]"></a>UartGetFromBuf</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, mw_uart.o(i.UartGetFromBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxData
</UL>

<P><STRONG><a name="[17e]"></a>UartPutToBuf</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, mw_uart.o(i.UartPutToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartPutToBuf &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx_DataPro
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
</UL>

<P><STRONG><a name="[8a]"></a>UartRxCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mw_uart.o(i.UartRxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartRxCnt &rArr; UartBufCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
</UL>

<P><STRONG><a name="[85]"></a>UartRxData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mw_uart.o(i.UartRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UartRxData &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetFromBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
</UL>

<P><STRONG><a name="[17f]"></a>UartSendData8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mw_uart.o(i.UartSendData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartSendData8
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
</UL>

<P><STRONG><a name="[181]"></a>UartTxCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mw_uart.o(i.UartTxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartTxCnt &rArr; UartBufCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
</UL>

<P><STRONG><a name="[7b]"></a>UartTxData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mw_uart.o(i.UartTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UartTxData &rArr; Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxCnt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Bt_Pro
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2B_TxService
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ACK
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtDataAnalyse
</UL>

<P><STRONG><a name="[182]"></a>UartTxIntDis</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mw_uart.o(i.UartTxIntDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartTxIntDis
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
</UL>

<P><STRONG><a name="[183]"></a>UartTxIntEn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mw_uart.o(i.UartTxIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartTxIntEn
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx_DataPro
</UL>

<P><STRONG><a name="[179]"></a>Uart_Rx_DataPro</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mw_uart.o(i.Uart_Rx_DataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart_Rx_DataPro &rArr; UartPutToBuf &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
</UL>

<P><STRONG><a name="[17a]"></a>Uart_Tx_DataPro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mw_uart.o(i.Uart_Tx_DataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart_Tx_DataPro &rArr; UartGetFromBuf &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntEn
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxIntDis
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxCnt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData8
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetFromBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntSerive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
</UL>

<P><STRONG><a name="[b4]"></a>Vol_Ctl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_dsp_single_mute.o(i.Vol_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Vol_Ctl &rArr; Dsp_Single &rArr; Dsp_Single_A &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
</UL>

<P><STRONG><a name="[a1]"></a>WDOG_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wdog.o(i.WDOG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WDOG_Init
</UL>

<P><STRONG><a name="[114]"></a>WDOG_Feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdog.o(i.WDOG_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>

<P><STRONG><a name="[a0]"></a>WDOG_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wdog.o(i.WDOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_WDOG_Init
</UL>

<P><STRONG><a name="[185]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rred.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[84]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_power.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Power_Pro
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Amp_Pro
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2B_TxService
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_File_TO_Flash
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_WR
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Dsp_RD
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_StoreLoadPro
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Det
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_PowerOnInit
</UL>

<P><STRONG><a name="[18a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[184]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[187]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[188]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[189]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[18c]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[18d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[18e]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[18f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[190]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[18b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[fe]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
</UL>

<P><STRONG><a name="[c1]"></a>default_download_IC_1</STRONG> (Thumb, 864 bytes, Stack size 8 bytes, app_dsp_adau1452.o(i.default_download_IC_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = default_download_IC_1 &rArr; SIGMA_WRITE_REGISTER_BLOCK &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_REGISTER_BLOCK
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGMA_WRITE_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_CMD
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_PowerOnInit
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = main &rArr; BT_DataRxPro &rArr; BtDataAnalyse &rArr; Dsp_Unite &rArr; Dsp_GEN_Filter &rArr; Filter_Higher_Order_Butterworth &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_AccOff_Pro
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Task_Execute
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Relocation_Int
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSoftware_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHardware_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ee]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Mixer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Mix_Input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Single_A
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
</UL>

<P><STRONG><a name="[7a]"></a>sch_compare</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sch_common.o(i.sch_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sch_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_PASSWORD
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtDataAnalyse
</UL>

<P><STRONG><a name="[7c]"></a>sch_memcpy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sch_common.o(i.sch_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sch_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_DataRxPro
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ReName
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2B_TxService
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtDataAnalyse
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Store
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Load
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtDataAnalyse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_ReName_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DspModeNameInit
</UL>

<P><STRONG><a name="[6a]"></a>sch_memset</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sch_common.o(i.sch_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDataInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_TEST_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Init
</UL>

<P><STRONG><a name="[fb]"></a>sin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Higher_Order_Butterworth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_1st_Order_Butterworth
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EQ_Algorithm
</UL>

<P><STRONG><a name="[115]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Butterworth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2st_Order_Bessel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[13c]"></a>stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arm_cm0.o(i.stop))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_SetMode
</UL>

<P><STRONG><a name="[8f]"></a>sysinit</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, sysinit.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sysinit &rArr; SIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Trim
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICS_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Clock_Init
</UL>

<P><STRONG><a name="[9a]"></a>systick_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.systick_disable))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTick_Close
</UL>

<P><STRONG><a name="[119]"></a>u8_TO_u32</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mw_flash.o(i.u8_TO_u32))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Program_U8
</UL>

<P><STRONG><a name="[13b]"></a>wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arm_cm0.o(i.wait))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_SetMode
</UL>

<P><STRONG><a name="[96]"></a>write_vtor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arm_cm0.o(i.write_vtor))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Relocation_Int
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>

<P><STRONG><a name="[194]"></a>_dcmpeq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
</UL>

<P><STRONG><a name="[195]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dsp_Info_Data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[196]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_SysTick_Init
</UL>

<P><STRONG><a name="[15e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mw_uart.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartExit
</UL>

<P><STRONG><a name="[161]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mw_uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[162]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mw_uart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[152]"></a>SPI_IsSPRF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mw_spi.o(i.SPI_IsSPRF))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[150]"></a>SPI_IsSPTEF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mw_spi.o(i.SPI_IsSPTEF))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[151]"></a>SPI_WriteDataReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mw_spi.o(i.SPI_WriteDataReg))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[14c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[14e]"></a>SPI_ModfEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ModfEnable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[14d]"></a>SPI_SetClockPhase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.SPI_SetClockPhase))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[131]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kbi.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_DeInit
</UL>

<P><STRONG><a name="[134]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kbi.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KBI_Init
</UL>

<P><STRONG><a name="[55]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[54]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
